#lang fracas
(define-key *key-none*)
;; Actions are always performed in the order they appear in the arrays below
(define-variant action-block
  #:u-data-asset
  (targeted ;; apply actions to a targeted set of actors ;; FIND action-block-targeted
   (
    (name key #:default *key-none* #:constructor name->id) ;; ID for this action block  - usually left blank, unless there is a specific animation event that is intended to run these actions (see `ability-state-data.anim-actions`)
    (targeting targeting-data) ;; gathers actors upon which the other Action types operate on
    (actions (array action) #:default '()) ;; run no matter how many actors are found by the targeting check; context: any actors found by the targeting
    (miss-actions (array action) #:default '()) ;; run only if no actors are found by the targeting check; context: owner (if targeting finds no actors)
    (found-actions (array action) #:default '()) ;; run only if > 0 actors are found by the targeting check; context: any actors found by the targeting
    (condition ability-condition #:default (ability-condition-true-value:)) ;; actions are only run if conditions evaluates to true
    )
   )
  (no-target ;; apply actions without specifying a target ;; FIND action-block-no-target
   (
    (name key #:default *key-none* #:constructor name->id)
    (actions (array action) #:default '())
    (condition ability-condition #:default (ability-condition-true-value:)) ;; actions are only run if conditions evaluates to true
    )
   )
  )

(define (action-camera-shake: #:data shake-spec
                              #:key (key *key-none*)
                              #:net-playback-mode (net-playback-mode *net-local-client*)
                              #:scale (scale 1.0)

                              #:world-space (world-space #f)
                              #:inner-radius (inner-radius 0)
                              #:outer-radius (outer-radius 0)
                              #:falloff (falloff 1.0)
                              )
  (action-camera-shake-start:
   #:key key
   #:data
   (camera-shake-data:
    #:shake-spec shake-spec
    #:params
    (shake-params:
     #:net-playback-mode net-playback-mode
     #:scale scale
     #:world-space world-space
     #:inner-radius inner-radius
     #:outer-radius outer-radius
     #:falloff falloff)
    )
   )
  )
  
  (define (ability-hero-shared-hit-actions:
         #:res-a-add (res-a 0) ;; Amount of resource added for ability A
         #:res-b-add (res-b 0) ;; Amount of resource added for ability B
         #:res-c-add (res-c 0) ;; Amount of resource added for ability C
         #:res-u-add (res-u 0) ;; Amount of resource added for ultimate ability
         #:hit-tag (hit-tag *tag-cue.character.shared.hitspark.light*) ;; Gameplay tag used in this character's effects list to play hit vfx/audio
         #:hit-tag-target (hit-tag-target *tag-cue.character.shared.hitspark.light.target*) ;; Gameplay tag used in the victim's effects list to play hit vfx/audio
         #:camera-shake (camera-shake *camera-shake-small*) ;; Camera shake to play on a successful hit
         #:self-actions (self-actions '()) ;; Additional actions you may want to run on self for a successful hit
         #:contextual-actions (contextual-actions '()) ;; Additional actions you may want to run on the victim on a successful hit
         #:other-actions (other-actions '()) ;; Any other actions you may want to run that are not explicitly targeted at self or victim
         )
  (append
   other-actions
   (list
    (action-block-targeted:
     #:targeting *targeting-self-instigator*
     #:found-actions
     (append
      (list
       (action-add-to-resources:
        #:resources
        (list
         (resource-pair: #:type *res-a* #:amount res-a)
         (resource-pair: #:type *res-b* #:amount res-b)
         (resource-pair: #:type *res-c* #:amount res-c)
         (resource-pair: #:type *res-u* #:amount res-u)
         ))
       (action-camera-shake: #:net-playback-mode *net-local-client* #:data camera-shake)
       )
      self-actions
      )
     )
    (action-block-targeted:
     #:targeting *targeting-contextual*
     #:found-actions
     (append
      (list
       (action-cue-tag: hit-tag #:target-tag hit-tag-target)
       )
      contextual-actions
      )
     )
    )
   )
  )

  (define-type damage-data) # forward decl

(define-variant action
  #:export-constructor
  ;; If run from an ability where `ability-data.commit` is set to `(enum ability-commit-mode on-ability-action)`,
  ;; this action can be used to delay deducting costs or starting the cooldown until a specific state or point in the animation (e.g., by use in #:anim-actions).
  ;; This is useful for resources from consumables, since you don't want to punish the player and spend their resources unless they get the benefit from the ability.
  ;; E.g., if the player gets hit-reacted/interrupted while using a jelly tart before the heal effect is applied, it wouldn't use your consumable
  ;; if the `action-commit` was on the same animation frame as the heal effect.
  ;; Targets are ignored for this action, and it is applied only to the actor executing the action
  ;; (otherwise, you could have players targeting one another and committing each other's abilites).
  (commit-ability
   ((mode commit #:default (mask commit cost cooldown)))) ;; default is to commit cost and cooldown together

  ;; applies a gameplay effect that damages all targets
  (damage
   ((data damage-data)))
)